openapi: 3.0.0
info:
  title: REST API for Library system
  description: REST API for Library system
  version: 1.0.0
  contact:
    email: example@gmail.com
    name: REST API example
tags:
  - name: library
    description: everything about books
  - name: author
    description: everything about authors
  - name: user
    description: everything about users
  - name: Login
    description: Operations about user login
servers:
  - url: http://localhost:5173/api/v1
paths:
  /books:
    get:
      tags:
        - library
      description: Use this API to fetch all books
      responses:
        "200":
          description: all books fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
    post:
      tags:
        - library
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddBook"
      responses:
        "201":
          description: The created book
  /books/{bookId}:
    get:
      tags:
        - library
      description: Use this API to fetch details of a course
      parameters:
        - name: bookId
          required: true
          in: path
          schema:
            type: integer
      responses:
        "200":
          description: course created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
  /books/borrow/{bookId}:
    patch:
      tags:
        - library
      description: Use this API to borrow a book.
      parameters:
      - name: bookId
        description: The id of the book to be borrowed
        required: true
        in: path
        schema:
         type: integer
      responses:
       "202":
        description: Book borrowed successfully    
       "401":
          description: "User is not logged in or the session is expired"
       "404":
        description: A book with the specified ID was not found.
  /books/return/{bookId}:
    patch:
      tags:
        - library
      description: Use this API to return a book
      parameters:
      - name: bookId
        schema:
         type: string
      responses:
        "202":
          description: Book returned successfully
          content:
            application/json:
              schema:
                status:
                  type: integer
                message:
                  type: string
        "401":
          description: "User is not logged in or the session is expired"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/error"
  /authors:
    get:
      tags:
        - author
      summary: Get the list of all authors
      responses:
        "200":
          description: list of all authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      tags:
        - author
      summary: Add new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddAuthor"
      responses:
        "201":
          description: author added
  /login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /author:
    put:
      tags:
        - author
      summary: Update an existing author
      description: Update an existing author by Id
      operationId: updateAuthor
      requestBody:
        description: Update an existing author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/author"
          application/xml:
            schema:
              $ref: "#/components/schemas/author"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/author"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/author"
            application/xml:
              schema:
                $ref: "#/components/schemas/author"
        "400":
          description: Invalid ID supplied
        "404":
          description: Author not found
        "405":
          description: Validation exception
  /author/{authorId}:
    delete:
      tags:
        - author
      summary: Deletes an author
      description: delete an author
      operationId: deleteAuthor
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: authorId
          in: path
          description: Author id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid author value

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    AddAuthor:
      type: object
      properties:
        name:
          type: string
    AddBook:
      type: object
      properties:
        name:
          type: string
    book:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: integer
        isbn:
          type: string
        publisher:
          type: string
        authors:
          type: array
        published:
          type: string
        status:
          type: string
        borrowerId: 
          type: integer
        borrowDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
    books:
      type: array
      items:
        $ref: "#/components/schemas/book"
    user:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10

        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"

        isAdmin:
          type: boolean
          description: If user is an admin
          example: false
    error:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message: 
          type: string
          example: "Not found"
    users:
      type: array
      items:
        $ref: "#/components/schemas/user"
    author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        authorName:
          type: string
      xml:
        name: tag
    authors:
      type: array
      items:
        $ref: "#/components/schemas/author"
